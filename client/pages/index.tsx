import Head from 'next/head'
import { useContext, useState } from 'react'
import { EthereumContext } from '../src/context/EthereumContext'
import ReactMarkdown from 'react-markdown'
import { Prism as SyntaxHighlighter } from 'react-syntax-highlighter';

const firstContractTitle = `
# First Contract
~~~solidity
~~~  
`

const contractCode = `
// SPDX-License-Identifier: GPL-3.0

pragma solidity ^0.8.17;

contract FirstContract {
    uint256 public x;

    constructor() {
        x = 0;
    }

    function setX(uint256 value) public {
        x = value;
    }
}
`

const selectedAccountTitle = `
  # Como obter a conta selecionada com *web3.js*
  ~~~js
  ~~~
`

const gettingSelectedAccount = `
const web3 = new Web3(Web3.givenProvider);
await web3.eth.getAccounts()
`

export default function Home() {

  const { accounts, contract } = useContext(EthereumContext);
  const [xValueDisplay, setXValueDisplay] = useState<number>(0);
  const [xValueInput, setXValueInput] = useState<string>('0');


  async function getXValueFromContract() {
    setXValueDisplay(await contract?.methods.x().call())
  }

  async function setXValueFromContract() {
    await contract?.methods.setX(xValueInput).send({ from: accounts[0] })
    setXValueDisplay(await contract?.methods.x().call())
    setXValueInput('0');
  }

  return (
    <>
      <Head>
        <title>DApp Boilerplate</title>
        <meta name="description" content="Generated by create next app" />
        <meta name="viewport" content="width=device-width, initial-scale=1" />
        <link rel="icon" href="/favicon.ico" />
      </Head>
      <main>
        <section>
          <h1>O smart contract</h1>
          <p>Contrato para teste chamado <i>FirstContract</i>. Possui apenas uma
            variável <i>public</i> chamada <b>x</b></p>. Por ser <i>public</i>, podemos
          recuperar o seu valor com o método sem necessitar criar um <i>getter</i>.
          <div>
            <ReactMarkdown className='markdown' components={{
              code() {
                return (
                  <SyntaxHighlighter language='solidity'>
                    {contractCode}
                  </SyntaxHighlighter>
                )
              }
            }} >
              {firstContractTitle}
            </ReactMarkdown>
          </div>
        </section>
        <section>
          <h1>Obtendo a conta selecionada no MetaMask</h1>
          <p>Conta selecionada: {accounts}</p>
          <div>
            <ReactMarkdown className='markdown' components={{
              code() {
                return (
                  <SyntaxHighlighter language='javascript'>
                    {gettingSelectedAccount}
                  </SyntaxHighlighter>
                )
              }
            }} >
              {selectedAccountTitle}
            </ReactMarkdown>
          </div>
        </section>
        <button onClick={getXValueFromContract}>Interact with contract</button>
        <h3>{xValueDisplay}</h3>
        <div>
          <input type="number" onChange={(e) => setXValueInput(e.target.value)} value={xValueInput} />
          <button onClick={setXValueFromContract}>Set</button>
        </div>
      </main>
    </>
  )
}
